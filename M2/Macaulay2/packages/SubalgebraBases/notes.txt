Some notes for how to modify the current code.

Todo list
---------
> Remove unnecessary/old code


> Remove unnecessary parentheses
> Separate CompTable modifying functions from service-functions.m2 (see discussion below).
> Strategy "Markov basis" --- only subduct on generators of the binomial ideal (rather than a GB), which we can compute quickly using FourTiTwo.
  -- do we have an implementation that would work with just the binomial generators
> Which subductions to export? Anything without compTable
   ? Can we export only some methods ?

> Determine what "subduction" and "%" should do with (RingElement, SAGBIBasis)
  -- currently this "subduction" is not implemented and "%" performs a subduction.

> Implement the correct caching behaviour in subalgebraBasis and sagbi:
  -- A subring is an immutable object - in its cache we store the 'most computationally advanced' SAGBIBasis object
  -- When resuming a subalgebraBasis or sagbi computation from a SAGBIBasis object, use the previously selected options
    * Only adjust the Limit option
  -- Add another option to sagbi / subalgebraBasis: RenewOptions (default: false)
    * if RenewOptions == true then set all the options to ones supplied by the user
    * RenewOptions is false by default because the first priority is to recover the options from the previous computation
  -- matrices cache a Subring which, in turn, cache the SAGBIBasis


> When picking up where a computation left off, if the original set of generators was autosubducted then don't autosubduct again.
  -- Could be implemented by setting the AutoSubduce option to false once autosubduction is done


Discussion
----------
Ollie: It would be great to have a separate file(s) for subduction/sagbi related functions.
       Currently, service-functions.m2 is getting very crowded and contains many levels of functions:
       E.g. updateComputation passes off to one of three different functions.
       There are at least two ways to solve this:
       1) Have functions that do similar things in one file, such as the four update-related functions above
       2) Have functions on a similar level in one file, such as updateComputation in a higher-level file than what it calls
          We already do this for sagbi, since it sits in one file and calls stuff in service-functions.m2




